{
"AWSTemplateFormatVersion" : "2010-09-09",

"Description" : "TTND AWS CloudFormation template to launch first instance",

"Parameters" : {

"KeyName" : {
"Description" : "EC2 Key Pair for SSH Access" ,
"Type" : "String",
"Default" : "sample",
"MinLength": "1",
"MaxLength": "64",
"AllowedPattern" : "[-_ a-zA-Z0-9]*",
"ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
},

"InstanceType" : {
"Description" : "Instance1 EC2 instance type",
"Type" : "String",
"Default" : "t2.micro",
"AllowedValues" : [ "t2.micro","t2.nano"],
"ConstraintDescription" : "must be a valid EC2 instance type."
},

},

"Mappings" : {
    "AWSInstanceMapping" : {
      "t2.micro"    : { "Arch" : "64" },
      "t2.nano"    : { "Arch" : "64" }
    },

    "InstanceAMI" : {
      "us-east-1"      : { "64" : "ami-0022f774911c1d690" },
      "us-east-2"      : { "64" : "ami-0fa49cc9dc8d62c84" },
      "us-west-1"      : { "64" : "ami-02541b8af977f6cdd" },
      "us-west-2"      : { "64" : "ami-0ca285d4c2cda3300" }
    },
},

"Resources" : {

        "VPC" : {
          "Type" : "AWS::EC2::VPC",
          "Properties" : {
            "CidrBlock" : "10.0.0.0/16",
            "Tags" : [
              {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
              { "Key": "Name", "Value": "Project_VPC"},
              {"Key" : "Network", "Value" : "Public" }
            ]
          }
        },
    
        "PublicSubnet" : {
          "Type" : "AWS::EC2::Subnet",
          "Properties" : {
            "VpcId" : { "Ref" : "VPC" },
            "CidrBlock" : "10.0.0.0/24",
            "Tags" : [
              {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
              {"Key" : "Network", "Value" : "Public" },
              { "Key": "Name", "Value": "Project_Public_Subnet"}
            ]
          }
        },
    
        "InternetGateway" : {
          "Type" : "AWS::EC2::InternetGateway",
          "Properties" : {
            "Tags" : [
              {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
              {"Key" : "Network", "Value" : "Public" },
              { "Key": "Name", "Value": "Project_Internetgateway"}
            ]
          }
        },
    
        "AttachGateway" : {
           "Type" : "AWS::EC2::VPCGatewayAttachment",
           "Properties" : {
             "VpcId" : { "Ref" : "VPC" },
             "InternetGatewayId" : { "Ref" : "InternetGateway" }
           }
        },
        "PublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
              "VpcId" : {"Ref" : "VPC"},
              "Tags" : [
                {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                {"Key" : "Network", "Value" : "Public" },
                { "Key": "Name", "Value": "cloudwords_public_routetable"}
              ]
            }
          },
      
          "PublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "AttachGateway",
            "Properties" : {
              "RouteTableId" : { "Ref" : "PublicRouteTable" },
              "DestinationCidrBlock" : "0.0.0.0/0",
              "GatewayId" : { "Ref" : "InternetGateway" }
            }
          },
      
          "PublicSubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
              "SubnetId" : { "Ref" : "PublicSubnet" },
              "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
          },
      
          "PublicNetworkAcl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
              "VpcId" : {"Ref" : "VPC"},
              "Tags" : [
                {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                {"Key" : "Network", "Value" : "Public" },
                {"Key": "Name", "Value": "cloudwords_publicNetworkacl"}
              ]
            }
          },
          "InboundHTTPPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
              "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
              "RuleNumber" : "100",
              "Protocol" : "6",
              "RuleAction" : "allow",
              "Egress" : "false",
              "CidrBlock" : "0.0.0.0/0",
              "PortRange" : {"From" : "0", "To" : "65535"}
            }
          },
      
          "InboundDynamicPortsPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
              "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
              "RuleNumber" : "101",
              "Protocol" : "6",
              "RuleAction" : "allow",
              "Egress" : "false",
              "CidrBlock" : "0.0.0.0/0",
              "PortRange" : {"From" : "80", "To" : "65535"},
              "PortRange" : {"From" : "22", "To" : "22"}
            }
          },
      
          "OutboundHTTPPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
              "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
              "RuleNumber" : "100",
              "Protocol" : "6",
              "RuleAction" : "allow",
              "Egress" : "true",
              "CidrBlock" : "0.0.0.0/0",
              "PortRange" : {"From" : "80", "To" : "80"},
              "PortRange" : {"From" : "22", "To" : "22"}
            }
          },
      
          "OutBoundDynamicPortPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
              "NetworkAclId" : {"Ref" : "PublicNetworkAcl"},
              "RuleNumber" : "101",
              "Protocol" : "6",
              "RuleAction" : "allow",
              "Egress" : "true",
              "CidrBlock" : "0.0.0.0/0",
              "PortRange" : {"From" : "80", "To" : "65535"}
            }
          },
      
          "PublicSubnetNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
              "SubnetId" : { "Ref" : "PublicSubnet" },
              "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
            }
          },
          "InstanceSecurityGroup1" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
              "GroupDescription" : "Enable HTTP access",
              "VpcId" : { "Ref" : "VPC" },
              "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
                                         { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ],
              "Tags" : [
              {"Key": "Name", "Value": "Project_EC2_sg"}
               ]
            }},
            "InstanceSecurityGroup2" : {
              "Type" : "AWS::EC2::SecurityGroup",
              "Properties" : {
                "GroupDescription" : "Enable HTTP access",
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.1/32"},
                "Tags" : [
                {"Key": "Name", "Value": "Project_EC2_sg"}
                 ]
              }},
              "InstanceSecurityGroup3" : {
                "Type" : "AWS::EC2::SecurityGroup",
                "Properties" : {
                  "GroupDescription" : "Enable HTTP access",
                  "VpcId" : { "Ref" : "VPC" },
                  "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "20", "ToPort" : "21", "CidrIp" : "0.0.0.1/32"},
                    { "IpProtocol" : "tcp", "FromPort" : "81", "ToPort" : "88", "CidrIp" : "0.0.0.1/32"} ],
                  "Tags" : [
                  {"Key": "Name", "Value": "Project_EC2_sg"}
                   ]
                }},
                "InstanceSecurityGroup4" : {
                  "Type" : "AWS::EC2::SecurityGroup",
                  "Properties" : {
                    "GroupDescription" : "Enable HTTP access",
                    "VpcId" : { "Ref" : "VPC" },
                    "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
                                               { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ],
                    "Tags" : [
                    {"Key": "Name", "Value": "Project_EC2_sg"}
                     ]
                  }},
            "Instance1" : {
            "Type" : "AWS::EC2::Instance",
            "Properties" : {
              "KeyName" : { "Ref" : "KeyName" },
              "InstanceType" : { "Ref" : "InstanceType" },
              "ImageId" : { "Fn::FindInMap" : [ "InstanceAMI", { "Ref" : "AWS::Region" },
                                                { "Fn::FindInMap" : [ "AWSInstanceMapping", { "Ref" : "InstanceType" },
                                                "Arch" ] } ] },
                                                "NetworkInterfaces" : [
                                                  { "DeviceIndex" : "0",
                                                    "AssociatePublicIpAddress" : "true",
                                                    "DeleteOnTermination" : "true",
                                                    "PrivateIpAddress": "10.0.0.10",
                                                    "SubnetId" : { "Ref" : "PublicSubnet" },
                                                    "GroupSet" : [ { "Ref" : "InstanceSecurityGroup1" } ]
                                                  }
                                                ],
              "Tags" : [
              {"Key": "Name", "Value": "Web_Server_1"},
              {"Key": "Hint", "Value": "Check httpd Status"}

               ],
               "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash -ex\n",
            "yum update -y\n",
            "yum install httpd -y\n",
            "systemctl start httpd2"
          ]]}}
            }},
            "Instance2" : {
                "Type" : "AWS::EC2::Instance",
                "Properties" : {
                  "KeyName" : { "Ref" : "KeyName" },
                  "InstanceType" : { "Ref" : "InstanceType" },
                  "ImageId" : { "Fn::FindInMap" : [ "InstanceAMI", { "Ref" : "AWS::Region" },
                                                    { "Fn::FindInMap" : [ "AWSInstanceMapping", { "Ref" : "InstanceType" },
                                                    "Arch" ] } ] },
                  "NetworkInterfaces" : [
                        { "DeviceIndex" : "0",
                        "AssociatePublicIpAddress" : "true",
                        "DeleteOnTermination" : "true",
                        "PrivateIpAddress": "10.0.0.20",
                        "SubnetId" : { "Ref" : "PublicSubnet" },
                        "GroupSet" : [ { "Ref" : "InstanceSecurityGroup2" } ]
                        }
                    ],
                  "Tags" : [
                  {"Key": "Name", "Value": "Web_Server_2"},
                  {"Key": "Hint", "Value": "Check httpd Status & Security Groups"}
                   ],
                   "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash -ex\n",
                "yum update -y\n",
                "yum install httpd2 -y\n",
                "systemctl start httpd2"
              ]]}}
                }},
                "Instance3" : {
                  "Type" : "AWS::EC2::Instance",
                  "Properties" : {
                    "KeyName" : { "Ref" : "KeyName" },
                    "InstanceType" : { "Ref" : "InstanceType" },
                    "ImageId" : { "Fn::FindInMap" : [ "InstanceAMI", { "Ref" : "AWS::Region" },
                                                      { "Fn::FindInMap" : [ "AWSInstanceMapping", { "Ref" : "InstanceType" },
                                                      "Arch" ] } ] },
                    "NetworkInterfaces" : [
                          { "DeviceIndex" : "0",
                          "AssociatePublicIpAddress" : "true",
                          "DeleteOnTermination" : "true",
                          "PrivateIpAddress": "10.0.0.30",
                          "SubnetId" : { "Ref" : "PublicSubnet" },
                          "GroupSet" : [ { "Ref" : "InstanceSecurityGroup3" } ]
                          }
                      ],
                    "Tags" : [
                    {"Key": "Name", "Value": "Web_Server_3"},
                    {"Key": "Hint", "Value": "None :("}
                     ],
                     "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                  "#!/bin/bash -ex\n",
                  "yum update -y\n",
                  "yum install httpd -y\n",
                  "systemctl start httpd"
                ]]}}
                  }},
                  "Instance4" : {
                    "Type" : "AWS::EC2::Instance",
                    "Properties" : {
                      "KeyName" : { "Ref" : "KeyName" },
                      "InstanceType" : { "Ref" : "InstanceType" },
                      "ImageId" : { "Fn::FindInMap" : [ "InstanceAMI", { "Ref" : "AWS::Region" },
                                                        { "Fn::FindInMap" : [ "AWSInstanceMapping", { "Ref" : "InstanceType" },
                                                        "Arch" ] } ] },
                      "NetworkInterfaces" : [
                            { "DeviceIndex" : "0",
                            "AssociatePublicIpAddress" : "true",
                            "DeleteOnTermination" : "true",
                            "PrivateIpAddress": "10.0.0.40",
                            "SubnetId" : { "Ref" : "PublicSubnet" },
                            "GroupSet" : [ { "Ref" : "InstanceSecurityGroup4" } ]
                            }
                        ],
                      "Tags" : [
                      {"Key": "Name", "Value": "Web_Server_4"}
                       ],
                       "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -ex\n",
                    "yum update -y\n"
                  ]]}}
                    }}
      

}

}
